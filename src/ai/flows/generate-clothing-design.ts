// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview AI flow for generating clothing designs based on a text prompt.
 *
 * - generateClothingDesign - A function that generates multiple clothing design images based on a text prompt.
 * - GenerateClothingDesignInput - The input type for the generateClothingDesign function.
 * - GenerateClothingDesignOutput - The return type for the generateClothingDesign function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GenerateClothingDesignInputSchema = z.object({
  prompt: z.string().describe('A text prompt describing the desired clothing design.'),
});

export type GenerateClothingDesignInput = z.infer<typeof GenerateClothingDesignInputSchema>;

const GenerateClothingDesignOutputSchema = z.object({
  designImages: z.array(z.string()).describe('An array of data URIs, each containing a generated clothing design image. Each URI must include a MIME type and use Base64 encoding. Expected format: \'data:<mimetype>;base64,<encoded_data>\'.'),
});

export type GenerateClothingDesignOutput = z.infer<typeof GenerateClothingDesignOutputSchema>;

export async function generateClothingDesign(input: GenerateClothingDesignInput): Promise<GenerateClothingDesignOutput> {
  return generateClothingDesignFlow(input);
}

// This prompt definition is primarily for schema validation and documentation,
// as the actual image generation uses ai.generate with a specific model.
const generateClothingDesignPrompt = ai.definePrompt({
  name: 'generateClothingDesignPrompt',
  input: {schema: GenerateClothingDesignInputSchema},
  output: {schema: GenerateClothingDesignOutputSchema},
  prompt: `You are an AI fashion designer. Please generate multiple clothing designs based on the following prompt: {{{prompt}}}. The designs should be realistic and visually appealing. Return the designs as an array of data URIs.`,
});

const NUM_IMAGES_TO_GENERATE = 3;

const generateClothingDesignFlow = ai.defineFlow(
  {
    name: 'generateClothingDesignFlow',
    inputSchema: GenerateClothingDesignInputSchema,
    outputSchema: GenerateClothingDesignOutputSchema,
  },
  async (input: GenerateClothingDesignInput) => {
    const imagePromises = [];
    for (let i = 0; i < NUM_IMAGES_TO_GENERATE; i++) {
      imagePromises.push(
        ai.generate({
          model: 'googleai/gemini-2.0-flash-exp',
          prompt: input.prompt, // Using the same detailed prompt for each variation
          config: {
            responseModalities: ['TEXT', 'IMAGE'],
            // Add safetySettings if specific adjustments are needed, otherwise defaults are used
            // safetySettings: [
            //   { category: 'HARM_CATEGORY_DANGEROUS_CONTENT', threshold: 'BLOCK_NONE' }
            // ],
          },
        })
      );
    }
    
    const results = await Promise.all(imagePromises);
    const designImages = results.map(result => {
      if (!result.media?.url) {
        console.error('Image generation result missing media URL:', result);
        throw new Error('Failed to generate one or more images, media URL missing.');
      }
      return result.media.url;
    });

    return { designImages };
  }
);

